<?php

/**
 * @file
 * Adds autocomplete="off" to form text inputs
 * (this is only the *browser* autocomplete which remembmers previous values,
 * it doesn't affect ajax autocomplete, which is what the term usually refers to)
 * 
 * @todo: FINISH field level overrides
 *          - actually implement the field override! :p
 * @todo: uninstall hook, purge all variables
 * @todo: the generic form alter will also need to check if there is a field level override
 * 
 * @author sean
 */

define('NOTOCOMPLETE_DISABLED', '0');
define('NOTOCOMPLETE_ENABLED', '1');
define('NOTOCOMPLETE_NO_OVERRIDE', '2');
define('NOTOCOMPLETE_FLAG_NAME', 'noto');
 
/**
 * Implements hook_form_FORM_ID_alter() for the node type form
 * 
 * this will add the notocomplet flag to the node type page. 
 * approach borrowed from the auto_nodetitle module.
 */
function notocomplete_form_node_type_form_alter(&$form, &$form_state) 
{
    $element_name = NOTOCOMPLETE_FLAG_NAME;
    $type_name = $form['#node_type']->type;
    
    // get the set value, defaulting to enabled
    $current_val = noto_var_get($type_name);
    
    // create the fieldset
    $form['notocomplete'] = array(
        '#type' => 'fieldset',
        '#title' => t('Suppress browser autocomplete'),
        '#collapsible' => true,
        '#collapsed' => true,
        '#group' => 'additional_settings'
    );
    
    // add the flag toggle to the fieldset
    $form['notocomplete'][$element_name] = array(
        '#type' => 'radios',
        '#default_value' => $current_val,
        '#options' => array(
            NOTOCOMPLETE_ENABLED => t('Enabled'),
            NOTOCOMPLETE_DISABLED => t('Disabled')
        ),
        '#description' => t('If enabled, the autocomplete="off" attribute will be added to all text inputs on this content type. This refers only to the browser history autocompletion, JavaScript/AJAX autocomplete functionality is not affected. If disabled, no change will be made to text inputs.')
    );
    
    // add an additional submit handler beyond whatever the usual is
    $form['#submit'][] = 'noto_bundle_form_handler';
}

/**
 * @brief insert a field specific setting into the field widget edit page. 
 * 
 * implements hook_form_FORM_ID_alter for the field widget edit form
 * 
 * there is apparently no generic hook to work with field settings forms, you have to hook the form by id.
 * @see https://api.drupal.org/api/drupal/modules!field_ui!field_ui.api.php/function/hook_field_settings_form/7
 * @see https://api.drupal.org/api/drupal/modules!field_ui!field_ui.admin.inc/function/field_ui_field_settings_form/7
 */
function notocomplete_form_field_ui_widget_type_form_alter(&$form, &$form_state)
{
    // get the field name and info
    $field_name = $form['#field_name'];
    $info = field_info_field($field_name);
    
    $element_name = NOTOCOMPLETE_FLAG_NAME;
    
    // find out the node content type and if noto is on for that
    $type_name = $form['#bundle'];
    $type_noto = noto_var_get($type_name);
    
    // find out if noto is on for this field currently
    $field_noto = noto_var_get($field_name, NOTOCOMPLETE_NO_OVERRIDE);
    
    // add the flag toggle to the settings
    $form['field']['settings']['notocomplete'] = array(
        '#type' => 'fieldset',
        '#title' => t('Suppress browser autocomplete'),
        '#group' => 'additional_settings',
        '#description' => 'This setting applies to this field everywhere it is used.'
    );
    $form['field']['settings']['notocomplete'][$element_name] = array(
        '#type' => 'radios',
        '#default_value' => $field_noto,
        '#options' => array(
            NOTOCOMPLETE_ENABLED => t('Enabled'),
            NOTOCOMPLETE_DISABLED => t('Disabled'),
            NOTOCOMPLETE_NO_OVERRIDE => t('Inherit from content type (currently '.($type_noto?'enabled':'disabled').')' )
        ),
        '#description' => t('If enabled, the autocomplete="off" attribute will be added to all text inputs of this field type. This refers only to the browser history autocompletion, JavaScript/AJAX autocomplete functionality is not affected. If disabled, no change will be made to text inputs.')
    );  
    
    // add an additional submit handler beyond whatever the usual is
    $form['#submit'][] = 'noto_field_form_handler';
}

/**
 * @brief submission handler for noto altered field forms. It will get the noto fields and set persistent vars
 * @param array $form
 * @param array $form_state
 * @return bool
 */
function noto_field_form_handler($form, $form_state) 
{
    
    if (
        is_array($form_state['values'])      // where the value is
        && is_string($form['#field_name'])                               // where the field name is
    ) {
        
        // get the field name
        $field_name = $form['#field_name'];
        
        // get the setting
        $noto_array = $form_state['values'];
        $val = $noto_array[NOTOCOMPLETE_FLAG_NAME];
        
        noto_var_set($field_name, $val);
        return true;
    } else {
        return false;
    }
}

/**
 * @brief submission handler for noto altered content type forms. It will get the noto fields and set persistent vars
 * @param array $form
 * @param array $form_state
 * @return bool
 */
function noto_bundle_form_handler($form, $form_state) 
{
    
    if (
        is_array($form_state['values'])                                 // where the value is
        && is_string($form['#node_type']->type)                         // where the field name is
    ) {
        
        // get the field name
        $type_name = $form['#node_type']->type;
        
        // get the setting
        $noto_array = $form_state['values'];
        $val = $noto_array[NOTOCOMPLETE_FLAG_NAME];
        
        noto_var_set($type_name, $val);
        return true;
    } else {
        return false;
    }
}
 
/**
 * @brief this does the actual operation of modifying the form settings, where appropriate
 * 
 * implements hook_form_alter
 */
function notocomplete_form_alter(&$form, &$form_state, $form_id) 
{
    // sanity - notify user of unknown error
    if(!$form || empty($form)) {
        drupal_set_message('Notocomplete: Form not recognised', 'error');
        return;
    }
    
    // don't operate on admin forms
    if(!path_is_admin(current_path()) ) {
    
        // only operate on node entities
        if(isset($form['#entity_type']) && $form['#entity_type']=='node' && is_object($form_state['node'])) {
    
            // find out what content type this is and whether notocomplete is wanted for it.
            $type_name = $form_state['node']->type;
            $noto_setting = noto_var_get($type_name);
            
            if($noto_setting===NOTOCOMPLETE_ENABLED) {
                // now go over each of the form fields looking for a plain text type
                $form = arrayScanAndTransform($form, '#type', 'textfield', 'setAutocomplete');
            }
        }
    }
}

/**
 * scan an array for sub-arrays having a specific key with a specific value and perform some operation on them
 *
 * ie; scan for any sub-arrays where 'X' => Y then call a function that sets it to Z.
 * not using array_walk_recursive because it needs to operate on the whole array, rather than the item
 * warning: recursive!
 * 
 * @todo log something helpful on error
 * 
 * @param array $array scan for nested arrays in here
 * @param string $field scan for this key
 * @param mixed $value scan for this value (strict)
 * @param callable $operation the function to run on matching sub-arrays
 * @return array|bool the modified array, or false on error
 */
function arrayScanAndTransform($array, $field, $value, callable $operation)
{
    // sanity
    if (!is_array($array)) {
        return false;
    }
    if (!function_exists($operation)) {
        return false;
    }
    
    // iterate over array
    // (must do by ref, otherwise only a copy of sub-arrays will be transformed)
    foreach( $array as $key=>&$val ) {
        
        // check for sub-arrays, do recursion
        if (is_array($val)) {
            $val = arrayScanAndTransform($val, $field, $value, $operation);
        }
        
        // check for matches. if found, operate on the array
        if ($key==$field && $val===$value) {
            $array = call_user_func($operation, $array);
        }
    }
    
    return $array;
}

/**
 * insert the autocomplete=off key into an array (oversetting if it exists)
 * 
 * @todo log something helpful on error
 * 
 * @see http://www.midwesternmac.com/blogs/jeff-geerling/disabling-autocomplete-form
 *      https://api.drupal.org/api/drupal/developer!topics!forms_api_reference.html/7#attributes
 * 
 * @param array $array
 * @return array|bool the modified array, or false on error
 */
function setAutocomplete(&$array)
{
    // sanity
    if (!is_array($array)) {
        return false;
    }
    
    // weird edge case: #attributes exists, but it's not an array
    if (array_key_exists('#attributes', $array) && !is_array($array['#attributes'])) {
        return FALSE;
    }
    
    // create if not exists
    if (!array_key_exists('#attributes', $array)) {
        $array['#attributes'] = array();
    }
    
    // now set the autocomplete field
    $array['#attributes']['autocomplete'] = 'off';
    
    return $array;
}

/**
 * @brief standardised getter for noto settings
 * @param string $name the name of the field / bundle you're getting
 * @param int $default
 * @return int
 */
function noto_var_get($name, $default=NOTOCOMPLETE_ENABLED)
{
    // get setting with standard prefix, defaulting to enabled
    return variable_get(NOTOCOMPLETE_FLAG_NAME.'_'.$name, $default);
}
 
/**
 * @brief standardised setter for noto settings
 * 
 * @param string $name
 * @param int $setting
 * @param int $value
 */
function noto_var_set($name, $value)
{
    // get setting with standard prefix, defaulting to enabled
    variable_set(NOTOCOMPLETE_FLAG_NAME.'_'.$name, $value);
}
